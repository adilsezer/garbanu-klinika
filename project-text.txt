All Project Files:
garbanu-klinika/README.md
garbanu-klinika/app
    garbanu-klinika/app/components
        garbanu-klinika/app/components/ErrorBoundary
            garbanu-klinika/app/components/ErrorBoundary/ErrorBoundary.tsx
        garbanu-klinika/app/components/Slide
            garbanu-klinika/app/components/Slide/FullPageSlider.tsx
            garbanu-klinika/app/components/Slide/ScrollHint.tsx
            garbanu-klinika/app/components/Slide/Slide.tsx
            garbanu-klinika/app/components/Slide/SlideDots.tsx
            garbanu-klinika/app/components/Slide/SlideType.ts
            garbanu-klinika/app/components/Slide/SlidesContainer.tsx
            garbanu-klinika/app/components/Slide/slidesData.ts
        garbanu-klinika/app/components/SocialMedia
            garbanu-klinika/app/components/SocialMedia/SocialMediaIcons.tsx
        garbanu-klinika/app/components/TopBar
            garbanu-klinika/app/components/TopBar/HamburgerIcon.tsx
            garbanu-klinika/app/components/TopBar/TopBar.tsx
            garbanu-klinika/app/components/TopBar/TopBarItem.tsx
    garbanu-klinika/app/favicon.ico
    garbanu-klinika/app/globals.css
    garbanu-klinika/app/layout.tsx
    garbanu-klinika/app/lib
        garbanu-klinika/app/lib/*
    garbanu-klinika/app/page.tsx
    garbanu-klinika/app/styles
        garbanu-klinika/app/styles/*
    garbanu-klinika/app/utils
        garbanu-klinika/app/utils/*
garbanu-klinika/copy_all_files.sh
garbanu-klinika/get_project_text.sh
garbanu-klinika/next-env.d.ts
garbanu-klinika/next.config.js
garbanu-klinika/package-lock.json
garbanu-klinika/package.json
garbanu-klinika/postcss.config.js
garbanu-klinika/project-text.txt
garbanu-klinika/public
    garbanu-klinika/public/bg-images
        garbanu-klinika/public/bg-images/bg-image-care1.png
        garbanu-klinika/public/bg-images/bg-image-care2.png
        garbanu-klinika/public/bg-images/bg-image-care3.png
        garbanu-klinika/public/bg-images/bg-image-face1.png
        garbanu-klinika/public/bg-images/bg-image-face2.png
        garbanu-klinika/public/bg-images/bg-image-face3.png
        garbanu-klinika/public/bg-images/bg-image-main.png
        garbanu-klinika/public/bg-images/bg-image-product1.jpeg
        garbanu-klinika/public/bg-images/bg-image-product2.jpeg
        garbanu-klinika/public/bg-images/bg-image-product3.jpeg
    garbanu-klinika/public/icons
        garbanu-klinika/public/icons/facebook-icon.png
        garbanu-klinika/public/icons/instagram-icon.png
        garbanu-klinika/public/icons/tiktok-icon.png
garbanu-klinika/tailwind.config.js
garbanu-klinika/tsconfig.json
File Name: "garbanu-klinika/README.md"
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.


File Name: "garbanu-klinika/app/components/ErrorBoundary/ErrorBoundary.tsx"
"use client";

import React, { ReactNode } from "react";

interface ErrorBoundaryProps {
  children: ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
}

class ErrorBoundary extends React.Component<
  ErrorBoundaryProps,
  ErrorBoundaryState
> {
  constructor(props: ErrorBoundaryProps) {
    super(props);

    // Define a state variable to track whether is an error or not
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    // Update state so the next render will show the fallback UI
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    // You can use your own error logging service here
    console.log({ error, errorInfo });
  }

  render(): ReactNode {
    // Check if the error is thrown
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return (
        <div>
          <h2>Oops, there is an error!</h2>
          <button
            type="button"
            onClick={() => this.setState({ hasError: false })}
          >
            Try again?
          </button>
        </div>
      );
    }

    // Return children components in case of no error
    return this.props.children;
  }
}

export default ErrorBoundary;


File Name: "garbanu-klinika/app/components/Slide/FullPageSlider.tsx"
"use client";

import React, { useState, useRef, useEffect } from "react";
import TopBar from "../TopBar/TopBar";
import SlidesContainer from "./SlidesContainer";
import slidesData from "./slidesData";
import SocialMediaIcons from "../SocialMedia/SocialMediaIcons";
import SlideDots from "./SlideDots";
import ScrollHint from "./ScrollHint";

const FullPageSlider: React.FC = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const lastScrollTime = useRef(Date.now());
  const [touchStartY, setTouchStartY] = useState<number | null>(null);
  const [viewportHeight, setViewportHeight] = useState(0); // Initialize to 0

  useEffect(() => {
    // Set the initial height when the component mounts
    setViewportHeight(window.innerHeight);

    const handleResize = () => {
      setViewportHeight(window.innerHeight);
    };

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  const handleScroll = (e: React.WheelEvent) => {
    // ... existing scroll logic, e.g.:
    const currentTime = Date.now();
    if (currentTime - lastScrollTime.current < 1100) {
      return; // Prevents sudden multiple scroll events in short duration.
    }

    if (e.deltaY > 0 && currentSlide < slidesData.length - 1) {
      setCurrentSlide(currentSlide + 1);
    } else if (e.deltaY < 0 && currentSlide > 0) {
      setCurrentSlide(currentSlide - 1);
    }
    lastScrollTime.current = currentTime;
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStartY(e.touches[0].clientY);
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    if (touchStartY !== null) {
      const touchEndY = e.changedTouches[0].clientY;
      if (touchEndY > touchStartY + 10 && currentSlide > 0) {
        setCurrentSlide(currentSlide - 1);
      } else if (
        touchEndY < touchStartY - 10 &&
        currentSlide < slidesData.length - 1
      ) {
        setCurrentSlide(currentSlide + 1);
      }
    }
    setTouchStartY(null);
  };

  return (
    <div
      onWheel={handleScroll}
      onTouchStart={handleTouchStart}
      onTouchEnd={handleTouchEnd}
      className="overflow-hidden" // This applies the overflow: hidden style
      style={{ height: `${viewportHeight}px` }}
    >
      <SlidesContainer
        slides={slidesData}
        currentSlide={currentSlide}
        viewportHeight={viewportHeight}
      />
      <SocialMediaIcons />
      <TopBar
        slides={slidesData}
        currentSlide={currentSlide}
        onSlideChange={setCurrentSlide}
      />
      <ScrollHint />
      <SlideDots slides={slidesData} currentSlide={currentSlide} />
    </div>
  );
};

export default FullPageSlider;


File Name: "garbanu-klinika/app/components/Slide/ScrollHint.tsx"
const ScrollHint: React.FC = () => {
  return (
    <div className="fixed bottom-2 left-1/2 transform -translate-x-1/2 flex flex-col items-center bg-primary-opacity-20 p-2 rounded-lg shadow-lg">
      <div className="animate-bounce">
        <svg
          width="20"
          height="20"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          className="text-white"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M19 14l-7 7m0 0l-7-7m7 7V3"
          ></path>
        </svg>
      </div>
      <p className="text-center text-white text-sm">Scroll</p>
    </div>
  );
};

export default ScrollHint;


File Name: "garbanu-klinika/app/components/Slide/Slide.tsx"
import React from "react";
import Link from "next/link";
import Image from "next/image";
import { SlideType } from "./SlideType";

interface ContentItem {
  contentName: string;
  contentDesc?: string;
  contentPrice?: string;
  contentImage?: string;
}

interface Button {
  label: string;
  action: string;
}

interface SlideProps {
  title: string;
  type: SlideType;
  subtitle?: string;
  image?: string;
  contents?: ContentItem[];
  buttons?: Button[];
}

const ContentCard: React.FC<{
  item: ContentItem;
  type: SlideType;
  index: number;
}> = ({ item, type, index }) => {
  const card = (
    <div className="shadow-lg relative overflow-hidden rounded-lg h-full w-full">
      {item.contentImage && (
        <Image
          fill
          src={item.contentImage}
          alt={`Product ${index + 1}`}
          style={{ objectFit: "cover" }}
        />
      )}
      <div className="absolute bottom-0 left-0 right-0 bg-primary-opacity-30 font-semibold p-1 md:p-2">
        <p className="text-xs md:text-base text-white">{item.contentName}</p>
        <p className="text-xs md:text-base text-white">{item.contentDesc}</p>
        <p className="text-xs md:text-base text-white">{item.contentPrice}</p>
      </div>
    </div>
  );

  if (type === SlideType.Product && item.contentDesc) {
    return <Link href={`/${item.contentDesc.replace(" ", "")}`}>{card}</Link>;
  }

  return card;
};

const Slide: React.FC<SlideProps> = ({
  title,
  type,
  subtitle,
  image,
  contents,
  buttons,
}) => {
  return (
    <div
      className="h-full w-full flex flex-col items-center justify-center bg-cover bg-center p-4 overflow-hidden"
      style={{ backgroundImage: image ? `url(${image})` : undefined }}
    >
      <div
        className={`flex flex-col items-center justify-center h-screen ${
          type === SlideType.Main ? "mt-64" : ""
        }`}
      >
        <h1
          className={`text-4xl md:text-8xl font-extrabold shadow-text hover:transform hover:scale-105 transition-transform duration-300 ease-in-out ${
            image ? "text-secondary" : "text-primary"
          }`}
        >
          {title}
        </h1>

        {subtitle && (
          <p className="text-4xl md:text-6xl text-secondary shadow-text text-center pt-4 ">
            {subtitle}
          </p>
        )}

        {(type === SlideType.Product || type === SlideType.Service) &&
          contents && (
            <div className="flex flex-wrap justify-center my-2 md:my-8 w-screen">
              {contents.slice(0, 4).map((item, index) => (
                <div
                  key={item.contentName}
                  className={`relative mx-2 my-2 w-2/5 h-24 md:w-1/6 md:h-60 ${
                    type === SlideType.Product ? "cursor-pointer" : ""
                  }`}
                >
                  <ContentCard item={item} type={type} index={index} />
                </div>
              ))}
            </div>
          )}

        {type === SlideType.TextCard && contents && (
          <div className="flex flex-wrap justify-center my-2 md:my-10">
            {contents.slice(0, 4).map((item, index) => (
              <div
                key={item.contentName}
                className="relative m-2 md:m-4 w-11/12 md:w-1/6 h-auto bg-gradient-to-br from-primary to-primary-opacity-50 rounded-lg shadow-md transform transition-transform duration-300 hover:scale-105"
              >
                <div className="p-4">
                  <p className="font-bold text-white text-center mb-1">
                    {item.contentName}
                  </p>
                  {item.contentDesc && (
                    <p className="text-white text-xs md:text-sm leading-relaxed text-justify mt-2">
                      {item.contentDesc}
                    </p>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}

        {type === SlideType.Contact && contents && (
          <div className="flex flex-wrap justify-center my-2 md:my-10">
            {contents.slice(0, 4).map((item, index) => (
              <div
                key={item.contentName}
                className="relative m-2 md:m-4 w-11/12 md:w-1/6 h-auto bg-gradient-to-br from-primary to-primary-opacity-50 rounded-lg shadow-md transform transition-transform duration-300 hover:scale-105"
              >
                <div className="p-4">
                  <p className="font-bold text-white text-center mb-1">
                    {item.contentName}
                  </p>
                  {item.contentDesc && (
                    <p className="text-white text-xs md:text-sm leading-relaxed text-justify mt-2">
                      {item.contentDesc}
                    </p>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}

        <div className="flex justify-center space-x-4 mt-4">
          {buttons &&
            buttons.map((button, index) => (
              <Link key={index} href={button.action}>
                <button className="border border-secondary bg-primary-opacity-50 font-semibold text-secondary shadow-text text-xl px-4 py-2 rounded mt-4 inline-block hover:bg-primary hover:text-secondary transition-colors duration-300">
                  {button.label}
                </button>
              </Link>
            ))}
        </div>
      </div>
    </div>
  );
};

export default Slide;


File Name: "garbanu-klinika/app/components/Slide/SlideDots.tsx"
import React from "react";
import { Slide } from "./slidesData";

interface SlideDotsProps {
  slides: Slide[];
  currentSlide: number;
}

const SlideDots: React.FC<SlideDotsProps> = ({ slides, currentSlide }) => (
  <div className="fixed bottom-1.5 right-4 flex flex-col items-center space-y-2">
    <svg
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className="animate-bounce-y"
    >
      <path
        d="M5 15L12 8L19 15"
        stroke="var(--secondary-color)"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
    {slides.map((_, index) => (
      <div
        key={index}
        className={`w-2 h-2 rounded-full ${
          currentSlide === index ? "bg-primary" : "bg-secondary"
        }`}
      ></div>
    ))}
    <svg
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className="animate-bounce-y-reverse"
    >
      <path
        d="M5 9L12 16L19 9"
        stroke="var(--secondary-color)"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  </div>
);

export default SlideDots;


File Name: "garbanu-klinika/app/components/Slide/SlideType.ts"
//enum for SlidesData type

export enum SlideType {
  Main = "main",
  Product = "product",
  Service = "service",
  TextCard = "textCard",
  Contact = "contact",
}


File Name: "garbanu-klinika/app/components/Slide/SlidesContainer.tsx"
import React from "react";
import Slide from "./Slide";
import { Slide as SlideType } from "./slidesData";

interface SlidesContainerProps {
  slides: SlideType[];
  currentSlide: number;
  viewportHeight: number;
}

const SlidesContainer: React.FC<SlidesContainerProps> = ({
  slides,
  currentSlide,
  viewportHeight,
}) => {
  const translateY = -currentSlide * viewportHeight; // Directly derive the value

  return (
    <div
      style={{
        transform: `translateY(${translateY}px)`,
        height: `${slides.length * viewportHeight}px`,
      }}
      className="transition-transform duration-500 ease-in-out"
    >
      {slides.map((slide, index) => (
        <div
          key={slide.title}
          style={{ height: `${viewportHeight}px` }}
          className="flex items-center justify-center overflow-hidden"
        >
          <Slide
            title={slide.title}
            type={slide.type}
            subtitle={slide.subtitle}
            image={slide.image}
            contents={slide.contents}
            buttons={slide.buttons}
          />
        </div>
      ))}
    </div>
  );
};

export default SlidesContainer;


File Name: "garbanu-klinika/app/components/Slide/slidesData.ts"
import { SlideType } from "./SlideType";

export interface Slide {
  title: string;
  type: SlideType;
  subtitle?: string;
  image?: string;
  contents?: Content[];
  buttons?: { label: string; action: string }[];
}

interface Content {
  contentName: string;
  contentDesc?: string;
  contentPrice?: string;
  contentImage?: string;
}

const slidesData: Slide[] = [
  {
    title: "Garbanų Klinika",
    type: SlideType.Main,
    subtitle: "Say Hello to Curls",
    image: "./bg-images/bg-image-main.png",
    buttons: [
      { label: "Learn More →", action: "/learn-more" },
      { label: "Contact Us →", action: "/contact" },
    ],
  },
  {
    title: "Foundations",
    type: SlideType.Product,
    contents: [
      {
        contentName: "Service 1",
        contentDesc: "Product A",
        contentPrice: "$100",
        contentImage: "./bg-images/bg-image-product1.jpeg",
      },
      {
        contentName: "Service 2",
        contentDesc: "Product B",
        contentPrice: "$200",
        contentImage: "./bg-images/bg-image-product2.jpeg",
      },
      {
        contentName: "Service 3",
        contentDesc: "Product C",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
      {
        contentName: "Service 4",
        contentDesc: "Product D",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
      {
        contentName: "Service 5",
        contentDesc: "Product E",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
      {
        contentName: "Service 6",
        contentDesc: "Product F",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
      {
        contentName: "Service 7",
        contentDesc: "Product G",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
    ],
    buttons: [{ label: "View More →", action: "/products" }],
  },
  {
    title: "Hair Care",
    type: SlideType.Service,
    contents: [
      {
        contentName: "Service 1",
        contentDesc: "Product A",
        contentPrice: "$100",
        contentImage: "./bg-images/bg-image-product1.jpeg",
      },
      {
        contentName: "Service 2",
        contentDesc: "Product B",
        contentPrice: "$200",
        contentImage: "./bg-images/bg-image-product2.jpeg",
      },
      {
        contentName: "Service 3",
        contentDesc: "Product C",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
      {
        contentName: "Service 4",
        contentDesc: "Product D",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
      {
        contentName: "Service 5",
        contentDesc: "Product E",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
      {
        contentName: "Service 6",
        contentDesc: "Product F",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
      {
        contentName: "Service 7",
        contentDesc: "Product G",
        contentPrice: "$300",
        contentImage: "./bg-images/bg-image-product3.jpeg",
      },
    ],
  },
  {
    title: "Why Us?",
    type: SlideType.TextCard,
    subtitle: "Garbanos Prasideda nuo..",
    image: "./bg-images/bg-image-face3.png",
    contents: [
      {
        contentName: "Organic all natural ingredients",
      },
      {
        contentName: "Professionally trained skin care experts",
      },
      {
        contentName: "Hypoallergenic dermotologist approved products",
      },
    ],
  },
  {
    /* Write FAQ data */
    title: "D.U.K",
    type: SlideType.TextCard,
    contents: [
      {
        contentName: "Kas yra garbanos 1?",
        contentDesc:
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit.",
      },
      {
        contentName: "Kas yra garbanos 2?",
        contentDesc:
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit.",
      },
      {
        contentName: "Kas yra garbanos 3?",
        contentDesc:
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit.",
      },
      {
        contentName: "Kas yra garbanos 4?",
        contentDesc:
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vitae elit libero, a pharetra augue. Nullam id dolor id nibh ultricies vehicula ut id elit.",
      },
    ],
  },
  {
    title: "Contact Us",
    type: SlideType.Contact,
    subtitle: "Let's Talk",
    contents: [
      {
        contentName: "Address",
        contentDesc: "1234 Main St, San Francisco, CA 94123",
      },
      {
        contentName: "Instagram",
        contentDesc: "@garbanuklinika",
      },
    ],
  },
];

export default slidesData;


File Name: "garbanu-klinika/app/components/SocialMedia/SocialMediaIcons.tsx"
import React from "react";
import Image from "next/image";

const SocialMediaIcons: React.FC = () => (
  <div className="flex flex-col fixed top-4 md:top-6 right-4 z-50">
    <a
      href="https://www.facebook.com/garbanuklinika"
      target="_blank"
      rel="noopener noreferrer"
    >
      <Image
        src="./icons/facebook-icon.png"
        alt="Facebook"
        className="social-icon"
        width={32}
        height={32}
      />
    </a>
    <a
      href="https://www.tiktok.com/@garbanuklinika"
      target="_blank"
      rel="noopener noreferrer"
    >
      <Image
        src="./icons/tiktok-icon.png"
        alt="TikTok"
        className="social-icon"
        width={32}
        height={32}
      />
    </a>
    <a
      href="https://www.instagram.com/garbanuklinika"
      target="_blank"
      rel="noopener noreferrer"
      className="icon-container"
    >
      <Image
        src="./icons/instagram-icon.png"
        alt="Instagram"
        className="social-icon"
        width={32}
        height={32}
      />
    </a>
  </div>
);

export default SocialMediaIcons;


File Name: "garbanu-klinika/app/components/TopBar/HamburgerIcon.tsx"
const HamburgerIcon: React.FC<{ onClick: () => void }> = ({ onClick }) => (
  <div onClick={onClick} className="cursor-pointer flex flex-col gap-1">
    <div className="h-1 w-6 bg-primary"></div>
    <div className="h-1 w-6 bg-primary"></div>
    <div className="h-1 w-6 bg-primary"></div>
  </div>
);

export default HamburgerIcon;


File Name: "garbanu-klinika/app/components/TopBar/TopBar.tsx"
import React, { useState } from "react";
import TopBarItem from "./TopBarItem";
import HamburgerIcon from "./HamburgerIcon";

interface TopBarProps {
  slides: { title: string }[];
  currentSlide: number;
  onSlideChange: (slideIndex: number) => void;
}

const TopBar: React.FC<TopBarProps> = ({
  slides,
  currentSlide,
  onSlideChange,
}) => {
  const [isMenuOpen, setMenuOpen] = useState(false);

  return (
    <div className="fixed top-0 md:m-2 left-0 flex flex-wrap md:justify-start gap-y-4 p-2 z-10 w-screen">
      <div className="md:hidden p-2">
        <HamburgerIcon onClick={() => setMenuOpen(!isMenuOpen)} />
      </div>
      <div
        className={`transition-all ease-in-out duration-300 ${
          isMenuOpen ? "flex flex-col space-y-1" : "hidden"
        } md:flex md:flex-row md:space-y-0 md:space-x-2`}
      >
        {slides.map((slide, index) => (
          <TopBarItem
            key={slide.title}
            label={slide.title}
            isActive={index === currentSlide}
            onClick={() => {
              onSlideChange(index);
              setMenuOpen(false);
            }}
          />
        ))}
      </div>
    </div>
  );
};

export default TopBar;


File Name: "garbanu-klinika/app/components/TopBar/TopBarItem.tsx"
import React from "react";

interface TopBarItemProps {
  label: string;
  isActive: boolean;
  onClick: () => void;
}

const TopBarItem: React.FC<TopBarItemProps> = ({
  label,
  isActive,
  onClick,
}) => (
  <div
    onClick={onClick}
    className={`cursor-pointer px-4 py-2 rounded-lg transition-colors text-center duration-300 
    ${
      isActive
        ? "bg-primary text-secondary font-semibold"
        : "bg-secondary text-primary hover:bg-primary hover:text-secondary"
    }`}
  >
    {label}
  </div>
);

export default TopBarItem;


File Name: "garbanu-klinika/app/globals.css"
/* globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

.shadow-text {
  text-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
}

.social-icon {
  fill: var(--primary-color);
  width: 32px;
  height: 32px;
  margin-bottom: 20px;
}

:root {
  --primary-color: #a24e4e;
  --primary-opacity-50: rgba(69, 10, 10, 0.5);
  --primary-opacity-40: rgba(69, 10, 10, 0.4);
  --primary-opacity-30: rgba(69, 10, 10, 0.3);
  --primary-opacity-20: rgba(69, 10, 10, 0.2);
  --secondary-color: #fff7f7;
  --gradient-neutral-start: #fdfcfb; /* Neutral light gray */
  --gradient-neutral-end: #e2d1c3; /* Your primary color */
}

body {
  background: linear-gradient(
    135deg,
    var(--gradient-neutral-start) 0%,
    var(--gradient-neutral-end) 100%
  );
  overflow-x: hidden;
  overflow-y: hidden;
}

@media (max-width: 768px) {
  .bg-center {
    background-position: center;
  }

  .bg-cover {
    background-size: cover;
    background-repeat: no-repeat;
  }

  .w-60 {
    width: 100%;
  }

  .h-80 {
    height: auto;
  }

  h1.text-8xl {
    font-size: 3rem;
  }

  p.text-6xl {
    font-size: 2rem;
  }

  .social-icon {
    width: 24px;
    height: 24px;
    margin-bottom: 16px;
  }
}


File Name: "garbanu-klinika/app/layout.tsx"
import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Garbanų Klinika",
  description: "The best curl service in Vilnius",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}


File Name: "garbanu-klinika/app/page.tsx"
import ErrorBoundary from "./components/ErrorBoundary/ErrorBoundary";
import FullPageSlider from "./components/Slide/FullPageSlider";

export default function Home() {
  return (
    <div>
      <ErrorBoundary>
        <FullPageSlider />
      </ErrorBoundary>
    </div>
  );
}


File Name: "garbanu-klinika/next-env.d.ts"
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.


File Name: "garbanu-klinika/next.config.js"
/** @type {import('next').NextConfig} */
const nextConfig = {
  trailingSlash: true,
  output: "export",
  images: {
    unoptimized: true,
  },
};
module.exports = nextConfig;


File Name: "garbanu-klinika/package.json"
{
  "name": "garbanu-klinika",
  "version": "0.1.0",
  "homepage": "https://sezerad.github.io/garbanu-klinika",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@types/node": "20.4.5",
    "@types/react": "18.2.18",
    "@types/react-dom": "18.2.7",
    "autoprefixer": "10.4.14",
    "eslint": "8.46.0",
    "eslint-config-next": "13.4.12",
    "next": "13.4.12",
    "postcss": "8.4.27",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tailwindcss": "3.3.3",
    "typescript": "5.1.6"
  },
  "devDependencies": {
    "gh-pages": "^6.0.0"
  }
}


File Name: "garbanu-klinika/postcss.config.js"
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


File Name: "garbanu-klinika/tailwind.config.js"
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: "var(--primary-color)",
        secondary: "var(--secondary-color)",
        "primary-opacity-50": "var(--primary-opacity-50)",
        "primary-opacity-40": "var(--primary-opacity-40)",
        "primary-opacity-30": "var(--primary-opacity-30)",
        "primary-opacity-20": "var(--primary-opacity-20)",
      },
    },
  },
  plugins: [],
};


File Name: "garbanu-klinika/tsconfig.json"
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


